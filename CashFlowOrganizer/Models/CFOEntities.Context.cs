//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CashFlowOrganizer.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CashFlowOrganizerEntities : DbContext
    {
        public CashFlowOrganizerEntities()
            : base("name=CashFlowOrganizerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<ProfileInsert_Result> ProfileInsert(string aspNetUsersID, string firstName, string lastName, string subscriptionID)
        {
            var aspNetUsersIDParameter = aspNetUsersID != null ?
                new ObjectParameter("AspNetUsersID", aspNetUsersID) :
                new ObjectParameter("AspNetUsersID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var subscriptionIDParameter = subscriptionID != null ?
                new ObjectParameter("SubscriptionID", subscriptionID) :
                new ObjectParameter("SubscriptionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProfileInsert_Result>("ProfileInsert", aspNetUsersIDParameter, firstNameParameter, lastNameParameter, subscriptionIDParameter);
        }
    
        public virtual ObjectResult<ProfileIncomeExpenseSelect_Result> ProfileIncomeExpenseSelect(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProfileIncomeExpenseSelect_Result>("ProfileIncomeExpenseSelect", profileIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProfileSelectByUserID(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProfileSelectByUserID", idParameter);
        }
    
        public virtual ObjectResult<ProfileAccountInsertUpdate_Result> ProfileAccountInsertUpdate(Nullable<int> profileID, string accountXML)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            var accountXMLParameter = accountXML != null ?
                new ObjectParameter("AccountXML", accountXML) :
                new ObjectParameter("AccountXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProfileAccountInsertUpdate_Result>("ProfileAccountInsertUpdate", profileIDParameter, accountXMLParameter);
        }
    
        public virtual ObjectResult<string> ProfileAccountSelect(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProfileAccountSelect", profileIDParameter);
        }
    
        public virtual ObjectResult<ProfileIncomeExpenseInsertUpdate_Result> ProfileIncomeExpenseInsertUpdate(Nullable<int> profileID, string incomeXML, string expenseXML)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            var incomeXMLParameter = incomeXML != null ?
                new ObjectParameter("IncomeXML", incomeXML) :
                new ObjectParameter("IncomeXML", typeof(string));
    
            var expenseXMLParameter = expenseXML != null ?
                new ObjectParameter("ExpenseXML", expenseXML) :
                new ObjectParameter("ExpenseXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProfileIncomeExpenseInsertUpdate_Result>("ProfileIncomeExpenseInsertUpdate", profileIDParameter, incomeXMLParameter, expenseXMLParameter);
        }
    
        public virtual ObjectResult<IncomeAndExpenseDatesSelect_Result> IncomeAndExpenseDatesSelect(Nullable<int> maxMonths, string recurringIncomeAndExpensesXML)
        {
            var maxMonthsParameter = maxMonths.HasValue ?
                new ObjectParameter("MaxMonths", maxMonths) :
                new ObjectParameter("MaxMonths", typeof(int));
    
            var recurringIncomeAndExpensesXMLParameter = recurringIncomeAndExpensesXML != null ?
                new ObjectParameter("RecurringIncomeAndExpensesXML", recurringIncomeAndExpensesXML) :
                new ObjectParameter("RecurringIncomeAndExpensesXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IncomeAndExpenseDatesSelect_Result>("IncomeAndExpenseDatesSelect", maxMonthsParameter, recurringIncomeAndExpensesXMLParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CombinedBalanceSelect(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CombinedBalanceSelect", profileIDParameter);
        }
    
        public virtual ObjectResult<ProfileSelect_Result> ProfileSelect(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProfileSelect_Result>("ProfileSelect", profileIDParameter);
        }
    
        public virtual ObjectResult<ProfileDeleteALL_Result> ProfileDeleteALL(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProfileDeleteALL_Result>("ProfileDeleteALL", profileIDParameter);
        }
    
        public virtual ObjectResult<ProfileUpdate_Result> ProfileUpdate(Nullable<int> profileID, string firstName, string lastName)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProfileUpdate_Result>("ProfileUpdate", profileIDParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<ProfileInfoSelect_Result> ProfileInfoSelect(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProfileInfoSelect_Result>("ProfileInfoSelect", profileIDParameter);
        }
    }
}
